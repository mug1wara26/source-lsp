[
  {
    "label": "Infinity",
    "title": "Infinity:number",
    "description": "#### Infinity:number\n\nThe name `Infinity` refers to the special number value `Infinity`. See [ECMAScript Specification, Section 4.3.23](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-infinity)",
    "meta": "const"
  },
  {
    "label": "math_E",
    "title": "math_E:number",
    "description": "#### math\\_E:number\n\nThe Number value for e, Euler's number, which is approximately 2.718281828459045.",
    "meta": "const"
  },
  {
    "label": "math_LN2",
    "title": "math_LN2:number",
    "description": "#### math\\_LN2:number\n\nThe Number value for the natural logarithm of 2, which is approximately 0.6931471805599453.",
    "meta": "const"
  },
  {
    "label": "math_LN10",
    "title": "math_LN10:number",
    "description": "#### math\\_LN10:number\n\nThe Number value for the natural logarithm of 10, which is approximately 2.302585092994046.",
    "meta": "const"
  },
  {
    "label": "math_LOG2E",
    "title": "math_LOG2E:number",
    "description": "#### math\\_LOG2E:number\n\nThe Number value for the base-2 logarithm of eℝ, the base of the natural logarithms; this value is approximately 1.4426950408889634.\n\nNOTE: The value of math\\_LOG2E is approximately the reciprocal of the value of math\\_LN2.",
    "meta": "const"
  },
  {
    "label": "math_LOG10E",
    "title": "math_LOG10E:number",
    "description": "#### math\\_LOG10E:number\n\nThe Number value for the base-10 logarithm of e, the base of the natural logarithms; this value is approximately 0.4342944819032518.\n\nNOTE: The value of math\\_LOG10E is approximately the reciprocal of the value of math\\_LN10.",
    "meta": "const"
  },
  {
    "label": "math_PI",
    "title": "math_PI:number",
    "description": "#### math\\_PI:number\n\nThe Number value for π, the ratio of the circumference of a circle to its diameter, which is approximately 3.1415926535897932.",
    "meta": "const"
  },
  {
    "label": "math_SQRT1_2",
    "title": "math_SQRT1_2:number",
    "description": "#### math\\_SQRT1\\_2:number\n\nThe Number value for the square root of 0.5, which is approximately 0.7071067811865476.\n\nNOTE: The value of math\\_SQRT1\\_2 is approximately the reciprocal of the value of math\\_SQRT2.",
    "meta": "const"
  },
  {
    "label": "math_SQRT2",
    "title": "math_SQRT2:number",
    "description": "#### math\\_SQRT2:number\n\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.",
    "meta": "const"
  },
  {
    "label": "NaN",
    "title": "NaN:number",
    "description": "#### NaN:number\n\nThe name `NaN` refers to the special number value `NaN` (\"not a number\"). Note that `NaN` is a number, as specified by `is_number`. See [ECMAScript Specification, Section 4.3.24](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-nan)",
    "meta": "const"
  },
  {
    "label": "undefined",
    "title": "undefined:undefined",
    "description": "#### undefined:undefined\n\nThe name `undefined` refers to the special value `undefined`. See also [textbook explanation in section 4.1.1](https://sourceacademy.org/sicpjs/4.1.1#h5).",
    "meta": "const"
  },
  {
    "label": "arity",
    "title": "arity(f) → {number}",
    "description": "#### arity(f) → {number}\n\nReturns the number of parameters the given function `f` expects, excluding the rest parameter.",
    "meta": "func",
    "parameters": [
      "f"
    ]
  },
  {
    "label": "char_at",
    "title": "char_at(s, i) → {string}",
    "description": "#### char\\_at(s, i) → {string}\n\nTakes a string `s` as first argument and a nonnegative integer `i` as second argument. If `i` is less than the length of `s`, this function returns a one-character string that contains the character of `s` at position `i`, counting from 0. If `i` is larger than or equal to the length of `s`, this function returns `undefined`.",
    "meta": "func",
    "parameters": [
      "s",
      "i"
    ]
  },
  {
    "label": "display",
    "title": "display(v, s) → {value}",
    "description": "#### display(v, s) → {value}\n\nOptional second argument. If present, displays the given string `s`, followed by a space character, followed by the value `v` in the console. If second argument not present, just displays the value `v` in the console. The notation used for the display of values is consistent with [JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf), but also displays `undefined`, `NaN`, `Infinity`, and function objects.",
    "meta": "func",
    "parameters": [
      "v",
      "s"
    ],
    "optional_params": [
      "s"
    ]
  },
  {
    "label": "error",
    "title": "error(v, s)",
    "description": "#### error(v, s)\n\nOptional second argument. If present, displays the given string `s`, followed by a space character, followed by the value `v` in the console with error flag. If second argument not present, just displays the value `v` in the console with error flag. The evaluation of any call of `error` aborts the running program immediately. The notation used for the display of values is consistent with [JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf), but also displays `undefined`, `NaN`, `Infinity`, and function objects.",
    "meta": "func",
    "parameters": [
      "v",
      "s"
    ],
    "optional_params": [
      "s"
    ]
  },
  {
    "label": "get_time",
    "title": "get_time() → {number}",
    "description": "#### get\\_time() → {number}\n\nReturns number of milliseconds elapsed since January 1, 1970 00:00:00 UTC. See also [textbook example](https://sourceacademy.org/sicpjs/1.2.6#ex-1.21).",
    "meta": "func",
    "parameters": []
  },
  {
    "label": "is_boolean",
    "title": "is_boolean(v) → {boolean}",
    "description": "#### is\\_boolean(v) → {boolean}\n\nchecks whether a given value is a boolean",
    "meta": "func",
    "parameters": [
      "v"
    ]
  },
  {
    "label": "is_function",
    "title": "is_function(v) → {boolean}",
    "description": "#### is\\_function(v) → {boolean}\n\nchecks whether a given value is a function",
    "meta": "func",
    "parameters": [
      "v"
    ]
  },
  {
    "label": "is_number",
    "title": "is_number(v) → {boolean}",
    "description": "#### is\\_number(v) → {boolean}\n\nchecks whether a given value is a number. See also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).",
    "meta": "func",
    "parameters": [
      "v"
    ]
  },
  {
    "label": "is_string",
    "title": "is_string(v) → {boolean}",
    "description": "#### is\\_string(v) → {boolean}\n\nchecks whether a given value is a string. See also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).",
    "meta": "func",
    "parameters": [
      "v"
    ]
  },
  {
    "label": "is_undefined",
    "title": "is_undefined(v) → {boolean}",
    "description": "#### is\\_undefined(v) → {boolean}\n\nchecks whether a given value is the special value `undefined`",
    "meta": "func",
    "parameters": [
      "v"
    ]
  },
  {
    "label": "math_abs",
    "title": "math_abs(x) → {number}",
    "description": "#### math\\_abs(x) → {number}\n\ncomputes the absolute value of x; the result has the same magnitude as `x` but has positive sign.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_acos",
    "title": "math_acos(x) → {number}",
    "description": "#### math\\_acos(x) → {number}\n\ncomputes the arc cosine of `x`. The result is expressed in radians and ranges from +0 to +π.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_acosh",
    "title": "math_acosh(x) → {number}",
    "description": "#### math\\_acosh(x) → {number}\n\ncomputes the inverse hyperbolic cosine of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_asin",
    "title": "math_asin(x) → {number}",
    "description": "#### math\\_asin(x) → {number}\n\ncomputes the arc sine of `x`. The result is expressed in radians and ranges from -π / 2 to +π / 2.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_asinh",
    "title": "math_asinh(x) → {number}",
    "description": "#### math\\_asinh(x) → {number}\n\ncomputes the inverse hyperbolic sine of `x`. The result is expressed in radians and ranges from -π / 2 to +π / 2.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_atan",
    "title": "math_atan(x) → {number}",
    "description": "#### math\\_atan(x) → {number}\n\ncomputes the arc tangent of `x`. The result is expressed in radians and ranges from -π / 2 to +π / 2.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_atan2",
    "title": "math_atan2(y, x) → {number}",
    "description": "#### math\\_atan2(y, x) → {number}\n\ncomputes the arc tangent of the quotient `y` / `x` of the arguments `y` and `x`, where the signs of `y` and `x` are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named `y` be first and the argument named `x` be second. The result is expressed in radians and ranges from -π to +π.",
    "meta": "func",
    "parameters": [
      "y",
      "x"
    ]
  },
  {
    "label": "math_atanh",
    "title": "math_atanh(x) → {number}",
    "description": "#### math\\_atanh(x) → {number}\n\ncomputes the inverse hyperbolic tangent of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_cbrt",
    "title": "math_cbrt(x) → {number}",
    "description": "#### math\\_cbrt(x) → {number}\n\ncomputes the cube root of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_ceil",
    "title": "math_ceil(x) → {number}",
    "description": "#### math\\_ceil(x) → {number}\n\ncomputes the smallest (closest to -∞) Number value that is not less than `x` and is an integer. If `x` is already an integer, the result is `x`. The value of math\\_ceil(x) is the same as the value of -math\\_floor(-x).",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_clz32",
    "title": "math_clz32(n) → {number}",
    "description": "#### math\\_clz32(n) → {number}\n\nWhen math\\_clz32 is called with one argument `x`, the following steps are taken: Let n be ToUint32(x). Let p be the number of leading zero bits in the 32-bit binary representation of n. Return p.\n\nNOTE:  \nIf n is 0, p will be 32. If the most significant bit of the 32-bit binary encoding of n is 1, p will be 0.",
    "meta": "func",
    "parameters": [
      "n"
    ]
  },
  {
    "label": "math_cos",
    "title": "math_cos(x) → {number}",
    "description": "#### math\\_cos(x) → {number}\n\nComputes the cosine of `x`. The argument is expressed in radians.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_cosh",
    "title": "math_cosh(x) → {number}",
    "description": "#### math\\_cosh(x) → {number}\n\ncomputes the hyperbolic cosine of `x`.\n\nNOTE: The value of cosh(x) is the same as (exp(x) + exp(-x)) / 2.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_exp",
    "title": "math_exp(x) → {number}",
    "description": "#### math\\_exp(x) → {number}\n\ncomputes the exponential function of `x` (e raised to the power of `x`, where e is the base of the natural logarithms).",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_expm1",
    "title": "math_expm1(x) → {number}",
    "description": "#### math\\_expm1(x) → {number}\n\ncomputes subtracting 1 from the exponential function of `x` (e raised to the power of `x`, where e is the base of the natural logarithms). The result is computed in a way that is accurate even when the value of `x` is close to 0.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_floor",
    "title": "math_floor(x) → {number}",
    "description": "#### math\\_floor(x) → {number}\n\ncomputes the greatest (closest to +∞) Number value that is not greater than `x` and is an integer.  \nIf `x` is already an integer, the result is `x`.\n\nNOTE: The value of math\\_floor(x) is the same as the value of -math\\_ceil(-x).",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_fround",
    "title": "math_fround(x) → {number}",
    "description": "#### math\\_fround(x) → {number}\n\nWhen math\\_fround is called with argument `x`, the following steps are taken:\n\n1.  If `x` is NaN, return NaN.\n2.  If `x` is one of +0, -0, +∞, -∞, return `x`.\n3.  Let x32 be the result of converting `x` to a value in IEEE 754-2008 binary32 format using roundTiesToEven mode.\n4.  Let x64 be the result of converting x32 to a value in IEEE 754-2008 binary64 format.\n5.  Return the ECMAScript Number value corresponding to x64.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_hypot",
    "title": "math_hypot() → {number}",
    "description": "#### math\\_hypot() → {number}\n\ncomputes the square root of the sum of squares of its arguments.  \nIf no arguments are passed, the result is +0.",
    "meta": "func",
    "parameters": []
  },
  {
    "label": "math_imul",
    "title": "math_imul(x, x) → {number}",
    "description": "#### math\\_imul(x, x) → {number}\n\nWhen math\\_imul is called with arguments `x` and `y`, the following steps are taken:\n\n1.  Let a be ToUint32(x).\n2.  Let b be ToUint32(y).\n3.  Let product be (a × b) modulo 232.\n4.  If product ≥ 231, return product - 232; otherwise return product.",
    "meta": "func",
    "parameters": [
      "x",
      "x"
    ]
  },
  {
    "label": "math_log",
    "title": "math_log(x) → {number}",
    "description": "#### math\\_log(x) → {number}\n\nComputes the natural logarithm of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_log1p",
    "title": "math_log1p(x) → {number}",
    "description": "#### math\\_log1p(x) → {number}\n\ncomputes the natural logarithm of 1 + `x`. The result is computed in a way that is accurate even when the value of `x` is close to zero.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_log2",
    "title": "math_log2(x) → {number}",
    "description": "#### math\\_log2(x) → {number}\n\ncomputes the base 2 logarithm of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_log10",
    "title": "math_log10(x) → {number}",
    "description": "#### math\\_log10(x) → {number}\n\ncomputes the base 10 logarithm of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_max",
    "title": "math_max() → {number}",
    "description": "#### math\\_max() → {number}\n\nGiven zero or more numbers, returns the largest of them.  \nIf no arguments are given, the result is -∞.  \nIf any value is NaN, the result is NaN. The comparison of values to determine the largest value is done using the Abstract Relational Comparison algorithm except that +0 is considered to be larger than -0.",
    "meta": "func",
    "parameters": []
  },
  {
    "label": "math_min",
    "title": "math_min() → {number}",
    "description": "#### math\\_min() → {number}\n\nGiven zero or more arguments, returns the smallest of them.  \nIf no arguments are given, the result is +∞.  \nIf any value is NaN, the result is NaN. The comparison of values to determine the smallest value is done using the Abstract Relational Comparison algorithm except that +0 is considered to be larger than -0.",
    "meta": "func",
    "parameters": []
  },
  {
    "label": "math_pow",
    "title": "math_pow(base, exponent) → {number}",
    "description": "#### math\\_pow(base, exponent) → {number}\n\nComputes the result of raising base to the power of exponent.",
    "meta": "func",
    "parameters": [
      "base",
      "exponent"
    ]
  },
  {
    "label": "math_random",
    "title": "math_random() → {number}",
    "description": "#### math\\_random() → {number}\n\nReturns a number value with positive sign, greater than or equal to 0 but less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent algorithm or strategy. This function takes no arguments. Each math\\_random function created for distinct realms must produce a distinct sequence of values from successive calls.",
    "meta": "func",
    "parameters": []
  },
  {
    "label": "math_round",
    "title": "math_round(x) → {number}",
    "description": "#### math\\_round(x) → {number}\n\nReturns the number value that is closest to `x` and is an integer.  \nIf two integers are equally close to `x`, then the result is the Number value that is closer to +∞. If `x` is already an integer, the result is `x`. NOTE 1: math\\_round(3.5) returns 4, but math\\_round(-3.5) returns -3.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_sign",
    "title": "math_sign(x) → {number}",
    "description": "#### math\\_sign(x) → {number}\n\nComputes the sign of `x`, indicating whether `x` is positive, negative, or zero.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_sin",
    "title": "math_sin(x) → {number}",
    "description": "#### math\\_sin(x) → {number}\n\nComputes the sine of `x`. The argument is expressed in radians.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_sinh",
    "title": "math_sinh(x) → {number}",
    "description": "#### math\\_sinh(x) → {number}\n\nComputes the hyperbolic sine of `x`.\n\nNOTE: The value of sinh(x) is the same as (exp(x) - exp(-x)) / 2.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_sqrt",
    "title": "math_sqrt(x) → {number}",
    "description": "#### math\\_sqrt(x) → {number}\n\nComputes the square root of `x`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_tan",
    "title": "math_tan(x) → {number}",
    "description": "#### math\\_tan(x) → {number}\n\nComputes the tangent of `x`. The argument is expressed in radians.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_tanh",
    "title": "math_tanh(x) → {number}",
    "description": "#### math\\_tanh(x) → {number}\n\nComputes the hyperbolic tangent of `x`.\n\nNOTE: The value of `math_tanh(x)` is the same as `(exp(x) - exp(-x))/(exp(x) + exp(-x))`.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "math_trunc",
    "title": "math_trunc(x) → {number}",
    "description": "#### math\\_trunc(x) → {number}\n\nComputes the integral part of the number `x`, removing any fractional digits.",
    "meta": "func",
    "parameters": [
      "x"
    ]
  },
  {
    "label": "parse_int",
    "title": "parse_int(s, i) → {number}",
    "description": "#### parse\\_int(s, i) → {number}\n\nInterprets a given string `s` as an integer, using the positive integer `i` as radix, and returns the respective value.  \nExamples: `parse_int(\"909\", 10)` returns the number `909`, and `parse_int(\"-1111\", 2)` returns the number `-15`.  \nSee [ECMAScript Specification, Section 18.2.5](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-parseint-string-radix) for details.",
    "meta": "func",
    "parameters": [
      "s",
      "i"
    ]
  },
  {
    "label": "prompt",
    "title": "prompt(s) → {string}",
    "description": "#### prompt(s) → {string}\n\nPops up a window that displays the string `s`, provides an input line for the user to enter a text, a `Cancel` button and an `OK` button. The call of `prompt` suspends execution of the program until one of the two buttons is pressed. If the `OK` button is pressed, `prompt` returns the entered text as a string. If the `Cancel` button is pressed, `prompt` returns a non-string value.",
    "meta": "func",
    "parameters": [
      "s"
    ]
  },
  {
    "label": "stringify",
    "title": "stringify(v) → {string}",
    "description": "#### stringify(v) → {string}\n\nreturns a string that represents the value `v`, using a notation that is is consistent with [JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf), but also displays `undefined`, `NaN`, `Infinity`, and function objects. See also [textbook example](https://sourceacademy.org/sicpjs/3.3.5).",
    "meta": "func",
    "parameters": [
      "v"
    ]
  }
]